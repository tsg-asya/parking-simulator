/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateParkingLotArgs } from "./CreateParkingLotArgs";
import { UpdateParkingLotArgs } from "./UpdateParkingLotArgs";
import { DeleteParkingLotArgs } from "./DeleteParkingLotArgs";
import { ParkingLotFindManyArgs } from "./ParkingLotFindManyArgs";
import { ParkingLotFindUniqueArgs } from "./ParkingLotFindUniqueArgs";
import { ParkingLot } from "./ParkingLot";
import { ParkingSpaceFindManyArgs } from "../../parkingSpace/base/ParkingSpaceFindManyArgs";
import { ParkingSpace } from "../../parkingSpace/base/ParkingSpace";
import { ParkingLotService } from "../parkingLot.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ParkingLot)
export class ParkingLotResolverBase {
  constructor(
    protected readonly service: ParkingLotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ParkingLot",
    action: "read",
    possession: "any",
  })
  async _parkingLotsMeta(
    @graphql.Args() args: ParkingLotFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ParkingLot])
  @nestAccessControl.UseRoles({
    resource: "ParkingLot",
    action: "read",
    possession: "any",
  })
  async parkingLots(
    @graphql.Args() args: ParkingLotFindManyArgs
  ): Promise<ParkingLot[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ParkingLot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ParkingLot",
    action: "read",
    possession: "own",
  })
  async parkingLot(
    @graphql.Args() args: ParkingLotFindUniqueArgs
  ): Promise<ParkingLot | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParkingLot)
  @nestAccessControl.UseRoles({
    resource: "ParkingLot",
    action: "create",
    possession: "any",
  })
  async createParkingLot(
    @graphql.Args() args: CreateParkingLotArgs
  ): Promise<ParkingLot> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParkingLot)
  @nestAccessControl.UseRoles({
    resource: "ParkingLot",
    action: "update",
    possession: "any",
  })
  async updateParkingLot(
    @graphql.Args() args: UpdateParkingLotArgs
  ): Promise<ParkingLot | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParkingLot)
  @nestAccessControl.UseRoles({
    resource: "ParkingLot",
    action: "delete",
    possession: "any",
  })
  async deleteParkingLot(
    @graphql.Args() args: DeleteParkingLotArgs
  ): Promise<ParkingLot | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ParkingSpace])
  @nestAccessControl.UseRoles({
    resource: "ParkingSpace",
    action: "read",
    possession: "any",
  })
  async parkingSpaceId(
    @graphql.Parent() parent: ParkingLot,
    @graphql.Args() args: ParkingSpaceFindManyArgs
  ): Promise<ParkingSpace[]> {
    const results = await this.service.findParkingSpaceId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
