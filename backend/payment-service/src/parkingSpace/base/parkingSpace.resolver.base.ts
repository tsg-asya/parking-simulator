/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateParkingSpaceArgs } from "./CreateParkingSpaceArgs";
import { UpdateParkingSpaceArgs } from "./UpdateParkingSpaceArgs";
import { DeleteParkingSpaceArgs } from "./DeleteParkingSpaceArgs";
import { ParkingSpaceFindManyArgs } from "./ParkingSpaceFindManyArgs";
import { ParkingSpaceFindUniqueArgs } from "./ParkingSpaceFindUniqueArgs";
import { ParkingSpace } from "./ParkingSpace";
import { ReservationFindManyArgs } from "../../reservation/base/ReservationFindManyArgs";
import { Reservation } from "../../reservation/base/Reservation";
import { ParkingLot } from "../../parkingLot/base/ParkingLot";
import { ParkingSpaceService } from "../parkingSpace.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ParkingSpace)
export class ParkingSpaceResolverBase {
  constructor(
    protected readonly service: ParkingSpaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ParkingSpace",
    action: "read",
    possession: "any",
  })
  async _parkingSpacesMeta(
    @graphql.Args() args: ParkingSpaceFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ParkingSpace])
  @nestAccessControl.UseRoles({
    resource: "ParkingSpace",
    action: "read",
    possession: "any",
  })
  async parkingSpaces(
    @graphql.Args() args: ParkingSpaceFindManyArgs
  ): Promise<ParkingSpace[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ParkingSpace, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ParkingSpace",
    action: "read",
    possession: "own",
  })
  async parkingSpace(
    @graphql.Args() args: ParkingSpaceFindUniqueArgs
  ): Promise<ParkingSpace | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParkingSpace)
  @nestAccessControl.UseRoles({
    resource: "ParkingSpace",
    action: "create",
    possession: "any",
  })
  async createParkingSpace(
    @graphql.Args() args: CreateParkingSpaceArgs
  ): Promise<ParkingSpace> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        parkingLotId: {
          connect: args.data.parkingLotId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ParkingSpace)
  @nestAccessControl.UseRoles({
    resource: "ParkingSpace",
    action: "update",
    possession: "any",
  })
  async updateParkingSpace(
    @graphql.Args() args: UpdateParkingSpaceArgs
  ): Promise<ParkingSpace | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          parkingLotId: {
            connect: args.data.parkingLotId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ParkingSpace)
  @nestAccessControl.UseRoles({
    resource: "ParkingSpace",
    action: "delete",
    possession: "any",
  })
  async deleteParkingSpace(
    @graphql.Args() args: DeleteParkingSpaceArgs
  ): Promise<ParkingSpace | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Reservation])
  @nestAccessControl.UseRoles({
    resource: "Reservation",
    action: "read",
    possession: "any",
  })
  async reservationId(
    @graphql.Parent() parent: ParkingSpace,
    @graphql.Args() args: ReservationFindManyArgs
  ): Promise<Reservation[]> {
    const results = await this.service.findReservationId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ParkingLot, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ParkingLot",
    action: "read",
    possession: "any",
  })
  async parkingLotId(
    @graphql.Parent() parent: ParkingSpace
  ): Promise<ParkingLot | null> {
    const result = await this.service.getParkingLotId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
